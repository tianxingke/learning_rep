1.console.log(); 打印

2.Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity

3.要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符：
	第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；
	第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。
	由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。
	
4.另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：
	NaN === NaN; // false
	唯一能判断NaN的方法是通过isNaN()函数：
	isNaN(NaN); // true
	
	最后要注意浮点数的相等比较：
	1 / 3 === (1 - 2 / 3); // false
	这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：
	Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true
	
5.需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：
	var s = 'Test';
	s[0] = 'X';
	alert(s); // s仍然为'Test'
		
	toUpperCase()把一个字符串全部变为大写：
	var s = 'Hello';
	s.toUpperCase(); // 返回'HELLO'
	
	toLowerCase()把一个字符串全部变为小写
	
	indexOf()会搜索指定字符串出现的位置：
	var s = 'hello, world';
	s.indexOf('world'); // 返回7
	s.indexOf('World'); // 没有找到指定的子串，返回-1
	
	substring()返回指定索引区间的子串
	
6.Array	
请注意，直接给Array的length赋一个新的值会导致Array大小的变化：
	var arr = [1, 2, 3];
	arr.length; // 3
	arr.length = 6;
	arr; // arr变为[1, 2, 3, undefined, undefined, undefined]
	arr.length = 2;
	arr; // arr变为[1, 2]
	
	Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array。如果赋值时索引超过了会引起数组的大小发生变化，没有报错：
	var arr = ['A', 'B', 'C'];
	arr[1] = 99;
	arr; // arr现在变为['A', 99, 'C']
	
	
	与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：
	var arr = [10, 20, '30', 'xyz'];
	arr.indexOf(10); // 元素10的索引为0
	arr.indexOf(20); // 元素20的索引为1
	arr.indexOf(30); // 元素30没有找到，返回-1
	arr.indexOf('30'); // 元素'30'的索引为2
	注意了，数字30和字符串'30'是不同的元素。
	
	
	slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：
	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
	arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']
	
	如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array：
	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	var aCopy = arr.slice();
	aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
	aCopy === arr; // false
	
	
	push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
	var arr = [1, 2];
	arr.push('A', 'B'); // 返回Array新的长度: 4
	arr; // [1, 2, 'A', 'B']
	arr.pop(); // pop()返回'B'
	arr; // [1, 2, 'A']
	arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
	arr; // []
	arr.pop(); // 空数组继续pop不会报错，而是返回undefined
	arr; // []
		
	
	如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
	var arr = [1, 2];
	arr.unshift('A', 'B'); // 返回Array新的长度: 4
	arr; // ['A', 'B', 1, 2]
	arr.shift(); // 'A'
	arr; // ['B', 1, 2]
	arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
	arr; // []
	arr.shift(); // 空数组继续shift不会报错，而是返回undefined
	arr; // []
	
	
	sort()可以对当前Array进行排序
	
	reverse()把整个Array的元素给掉个个，也就是反转
	
	splice()方法是修改Array的“万能方法”，splice() 方法会直接对数组进行修改。
	它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
	var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
	// 从索引2开始删除3个元素,然后再添加两个元素:
	arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	// 只删除,不添加:
	arr.splice(2, 2); // ['Google', 'Facebook']
	arr; // ['Microsoft', 'Apple', 'Oracle']
	// 只添加,不删除:
	arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	
	concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array
	实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里：
	var arr = ['A', 'B', 'C'];
	arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]
	
	join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：
	var arr = ['A', 'B', 'C', 1, 2, 3];
	arr.join('-'); // 'A-B-C-1-2-3'
	
	
7.对象

	
=======================================================================================================================
	知识整理：
1.使用new关键字，什么情况下创建对象？
	当函数没用通过new 调用的时候，则做为普通函数执行，那么当fnc()执行的时候，其函数内的this取决于调用该函数的宿主对象。

	当通过new 调用的时候，则会在内部创建一个空的对象并将this指向该对象，并且这个时候函数执行完成以后必须返回一个对象值，优先级：用户返回对象 > 内建对象，如果
	function fn1() {
			this.x = 100;
			return 'x';
	}

	var o2 = new fn1();
	o2.x的值为100

	改成 
	function fn2() {
			this.x = 100;
			return 'x';
	}

	var o2 = new fn2();
	o2.x的值为100
	也就是new function的结果必须是一个对象

	比如我定义了一个function，并执行new操作：
	function Foo(){}
	var foo = new Foo();
	补补脑：
	每一个函数中都会有一个叫prototype的属性，类型是object，即一个引用对象。
	每一个对象中都会有一个叫__proto__的属性，类型野是object，也是一个引用对象。

	首先，当JavaScript引擎执行new操作时，会马上开辟一个块内存，创建一个空对象（并将this指向这个对象）。

	接着，执行构造函数Foo()，对这个空对象进行构造（构造函数里有什么属性和方法都一一给这个空白对象装配上去，这就是为何它叫构造函数了）。

	然而，给这个空对象添加了一个叫__proto__的属性，而且这个__proto__指向Foo()的prototype对象。换句话说，就是__proto__ = prototype;
	

2.json整理
	可以在前端页面如下组织：
	var datas = '{"program":"'+program.value+'","element09":"'+element09.value
					+'","bdgagency":"'+bdgagency.value+'","expfunc":"'+expfunc.value
					+'","fundtype":"'+fundtype.value+'","text2":"'+text2.value+'"}';
	其中可以拼接一些变量。
	
3.原理说明
			var a = '123';
			function login2() {
				alert(a);  		//undefined  变量提升后   var a,   此时a没有赋值。 
				var a = 'abc';
			}	
	我们需要重点注意的是，只有函数声明形式才能被提升。 
	
	但这一切随着 ES6 的 let/const 到来结束了，ES里除全局变量外，其它都使用 let/const，var 替换成 let 后变量提升就不复存在了。用 let 声明变量后，typeof 却不再安全了
	if (condition) {
		alert(typeof num); // Error!
		let num = 100;
	}
	 

	以前可以用 typeof == 'undefined'，来判断是否引入了某lib，比如jQuery

	// 判断jQuery是否引入了
	if (typeof $ !== 'undefined') {
		// do something
	}...
	jQuery没有引入，$ 没有声明，这句也不会报错而影响到下面的代码执行，但如果是 let 声明的就会报错了。

























--------------------------------------------------------------------
向网页加载脚本的方法有不止一种：

在指定页面的url处注入javascript代码，格式例如： javascript:console.log("我要吃月饼！"); 注意是完全覆盖掉url,不是添加在后面，然后按回车，你会发现页面没有变化，代码已经注入。
打开Chrome控制台，直接在里面编写javascript代码。


用Chrome的ScriptInspector插件
或直接
ctrl+shift+i 呼出开发人员工具(IE 里F12)
加上去即可。



js的注入：http://www.jb51.net/article/92639.htm