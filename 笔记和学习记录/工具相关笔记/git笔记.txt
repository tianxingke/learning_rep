1.
.git 路径问题：递归找最近的那个。
2.
提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
3.
git checkout -- file可以丢弃 工作区 的修改.  总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
4.
用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
5.git log
	git reflog
	$ git reset --hard HEAD^
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

6.删除版本库的文件
git rm 	<file>
然后提交


1.创建git库
	使用git init <目录名>  将目录作为库来使用，如果目录名不写，会默认使用当前目录进行。操作后会在目录下出现.git目录。

2.提交
	要把文件纳入git管理：
	git add 文件
	git commit -m '这是提交的描述'

3.克隆
	使用git clone 从现有git库拷贝项目（类似SVN checkout）
	git clone <git库url> <指定要保存的路径>  
	例子：$ git clone git://github.com/schacon/grit.git

	也可以指定下载下来的项目的名称，在命令的末尾加上自定义的名字
	例子：git clone git://github.com/schacon/grit.git mygrit

4.add
	将文件提交到缓存要执行 ： git add 文件
	此时运行：git status -s 后 状态是：A 文件
	如果又更改了文件，则状态变成：AM 文件
	-s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容

5.diff
	git diff
	执行 git diff 来查看执行 git status 的结果的详细信息。
	git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。
	尚未缓存的改动：git diff
	查看已缓存的改动： git diff --cached
	查看已缓存的与未缓存的所有改动：git diff HEAD
	显示摘要而非整个 diff：git diff --stat

16.连接github步骤：
	a).创建ssh key
	在git bash 里边，$ ssh-keygen -t rsa -C "youremail@example.com"

	b).粘贴id_rsa.pub文件的内容

17.关联远程github仓库（先有本地库，将本地同步到远端）
git init
git remote add origin https://github.com/tianxingke/demo.git

推送
git push -u origin master


1. git fetch：相当于是从远程获取最新版本到本地，不会自动merge
    
git fetch origin master
git log -p master..origin/master
git merge origin/master


    以上命令的含义：
   首先从远程的origin的master主分支下载最新的版本到origin/master分支上
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并

   上述过程其实可以用以下更清晰的方式来进行：
   
git fetch origin master:tmp
git diff tmp 
git merge tmp



？？？
推送和更新单文件

18。关联远程github仓库（先有远端库，将远端同步到本地）


19.分之管理
首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
Switched to branch 'dev'

然后，用git branch命令查看当前分支：
$ git branch
* dev
  master

  切换分之：
 $ git checkout master

 把dev分支的工作成果合并到master分支上：
$ git merge dev
合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev


Git鼓励大量使用分支：

查看分支：git branch     git branch -a 命令可以查看所有分支

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

20.冲突
修改了连个分之，然后想合并到master ，此时就可能出现冲突。
这时要手动修改冲突文件，并提交即可。最后删除分之。

用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit

21.分之管理策略
http://www.oschina.net/question/31384_157479
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
$ git merge --no-ff -m "merge with no-ff" dev


一般企业中开发一个项目的分支策略：
主分支 master
开发分支 develop
功能分支 feature
预发布分支  release
bug 分支 fixbug
其它分支 other

Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash

git stash list命令查看隐藏的
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：
$ git stash pop


分支还没有被合并过时，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan


22.多人协作
$ git clone git@github.com:michaelliao/learngit.git

要查看远程库的信息，用git remote
用git remote -v显示更详细的信息

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

23.标签
git tag <name>就可以打一个新标签
git tag查看所有标签

比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：
$ git tag v0.9 6224937

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" 3628164

git show <tagname>查看标签信息


git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；


如果标签打错了，也可以删除：
$ git tag -d v0.1



如果要推送某个标签到远程，使用命令git push origin <tagname>：
$ git push origin v1.0
或者，一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
$ git tag -d v0.9
Deleted tag 'v0.9' (was 6224937)
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9


24.自定义git
git 开启颜色
git config --global color.ui true


忽略某些文件时，需要编写.gitignore；

别名：
我们只需要敲一行命令，告诉Git，以后st就表示status：
$ git config --global alias.st status

